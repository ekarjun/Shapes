"$schema"   = "http://cyaninc.com/json-schemas/tosca-lite-v1/definition-module#"
title       = "E2E VPN Service"
package     = cyan
version     = "1.0"
description = "This document defines a sample end-to-end VPN service that is built from smaller components."
authors     = [ "Zsolt Haraszti (zsolt@cyaninc.com)" ]

imports {
  Container = tosca.capabilityTypes.Container
}

resourceTypes {

  E2eVpnService {
    derivedFrom = tosca.resourceTypes.NetworkService
    title = "End-to-end VPN service"
    description = """
      This resource type defines a sample service providing end-to-end VPN service for a given
      customer. It is to exemplify when the service is structured into a virtual and one or more
      non-virtual (perhaps L2) components. For the virtual side, it builds on the IpVpnService.
      For the dedicated side, it builds on a placeholder resource that currently does not have any
      real custom properties.
    """

    // The custom properties below are properties that are needed for the IpVpnService segment.

    properties {

      // "Customer" info panel

      customer {
        title = "Customer Name"
        description = "Name of the customer"
        type = string
      }

      customerVlanId {
        title = "VLAN Id"
        description = "VLAN id associated with customer"
        type = integer
        format = vlan-id
      }

      customerVnfIp {
        title = "Customer VNF-side IP"
        description = "Customer's VNF-side IP address (e.g., 192.168.10.254)"
        type = string
        format = ipv4-address
      }

      customerNetmask {
        title = "Customer Network Netmask"
        description = "Customer's private network netmask (e.g., 255.255.255.0)"
        type = string
        format = netmask
      }

      // "Placement" panel

      domainName {
        // should be chosen from title's of existing versa.resourceTypes.Director
        title = "Domain Name"
        description = "Name of the Versa Domain to be used for deploying the service"
        type = string
      }

      globalOrgName {
        // should be chosen from title's of existing versa.resourceTypes.Organization
        title = "Parent Organization Name"
        description = "Name of the parent Versa Organization for the service"
        type = string
      }

      appliance {
        // should be chosen from title's of existing versa.resourceTypes.Appliance
        title = "Appliance Name"
        description = "Name of the appliance withing the domain"
        type = string
      }

      unitNumber {
        title = "Appliance Unit Number"
        description = "Unit number representing customer on this appliance (e.g., 121)"
        type = integer
      }

      privateSideVPort {
        title = "Private Side vPort"
        description = "Customer facing v-port of VNF (e.g., vni-0/1)"
        type = string
      }

      publicSideVPort {
        title = "Public Side vPort"
        description = "Public facing v-port of VNF (e.g., vni-0/2)"
        type = string
      }

      // Routing panel

      customerDefaultGw {
        title = "Customer Default GW"
        description = "Customer's default gateway IP address (e.g., 192.168.10.1)"
        type = string
        format = ipv4-address
      }

      bgpRouting {
        title = "BGP Routing Information"
        description = "TBF"
        type = object
        optional = true

        properties {

          bgpRouterId {
            title = "BGP Router ID"
            description = "BGP router ID of the customer (e.g., 192.168.10.254)"
            type = string
            format = ipv4-address
          }

          bgpLocalAs {
            title = "BGP Local AS Number"
            description = "BGP local AS number for the customer (e.g., 65000)"
            type = string
          }

          bgpPeerAs {
            title = "BGP Peer AS Number"
            description = "BGP peer AS number for the customer (e.g., 1822)"
            type = string
          }

          bgpPeerAddress {
            title = "BGP Peer Address"
            description = "BGP peer address for the customer (e.g., 192.168.10.1)"
            type = string
            format = ipv4-address
          }
        }
      }

      // Firewall config panel

      firewall {

        title = "Firewall Configuration"
        description = "All configurations related to firewall settings"
        optional = true
        additionalProperties = false
        type = object
        properties {

          ingress {
            title = "Ingress Rules"
            description = "Rules controlling flows initiated from the public network toward the private network"
            type = array
            items {
              type = object
              properties {

                rule {
                  title = "Rule Type"
                  description = """Rule type such as "Custom TCP", "Custom UDP", "Custom ICMP", "SSH", "HTTP", "HTTPS""""
                  type = string
                  enum = [
                    "Custom TCP",
                    "Custom UDP",
                    "Custom ICMP",
                    "SSH",
                    "HTTP",
                    "HTTPS",
                    "SNMP",
                    "FTP",
                    "Ping",
                    "Telnet"
                    // TODO complete list here
                  ]
                }

                fromPort {
                  title = "From Port"
                  description = """
                    In case of TCP/UDP, this is the inclusive lowest value for the port range. For ICMP, this is the
                    code point (ICMP type code).
                  """
                  type = integer
                  format = port-number
                  default = 0
                }

                toPort {
                  title = "To Port"
                  description = """
                    In case of TCP/UDP, this is the inclusive highest value for the port range. For ICMP, this is the
                    code point (ICMP type code).
                  """
                  type = integer
                  format = port-number
                  default = 65535
                }

                remotePrefix {
                  title = "Remote Prefix"
                  description = "CIDR of the remote end"
                  type = string
                  format = ipv4-prefix
                }

              }
            }
          }

          egress {
            title = "Egress Rules"
            description = "Rules controlling flows initiated from the private network toward the public network"
            type = array
            items {
              type = object

              properties {

                rule {
                  title = "Rule Type"
                  description = """Rule type such as "Custom TCP", "Custom UDP", "Custom ICMP", "SSH", "HTTP", "HTTPS""""
                  type = string
                  enum = [
                    "Custom TCP",
                    "Custom UDP",
                    "Custom ICMP",
                    "SSH",
                    "HTTP",
                    "HTTPS",
                    "SNMP",
                    "FTP",
                    "Ping",
                    "Telnet"
                    // TODO complete list here
                  ]
                }

                fromPort {
                  title = "From Port"
                  description = """
                    In case of TCP/UDP, this is the inclusive lowest value for the port range. For ICMP, this is the
                    code point (ICMP type code).
                  """
                  type = integer
                  format = port-number
                  default = 0
                }

                toPort {
                  title = "To Port"
                  description = """
                    In case of TCP/UDP, this is the inclusive highest value for the port range. For ICMP, this is the
                    code point (ICMP type code).
                  """
                  type = integer
                  format = port-number
                  default = 65535
                }

                remotePrefix {
                  title = "Remote Prefix"
                  description = "CIDR of the remote end"
                  type = string
                  format = ipv4-prefix
                }

              }
            }
          }
        }
      }

      // NAT config panel

      staticNat {
        title = "Static NAT Configuration"
        description = "Configuration attributes for static NAT"
        optional = true
        additionalProperties = false
        type = object
        properties {

          fromPrefix {
            title = "From Prefix"
            description = "Customer IP address range expressed as CIDR to which NAT is applied (e.g., 192.168.10.0/24)"
            type = string
            format = ipv4-prefix
          }

          toPrefix {
            title = "To Prefix"
            description = "Public IP address range expressed as CIDR (e.g., 10.20.30.0/24)"
            type = string
            format = ipv4-prefix
          }

        }
      }

      portForwardingNat {
        title = "Static NAT Configuration"
        description = "Configuration attributes for static NAT"
        optional = true
        type = array
        items {

          type = object
          additionalProperties = false
          properties {

            originalDestinationIp {
              title = "Original IP"
              description = "Original destination IP address of incoming flow (e.g., 10.20.30.24)"
              type = string
            }

            originalDestinationPort {
              title = "Original Port"
              description = "Original destination port of incoming flow (e.g., 22)"
              type = integer
              format = port-number
            }

            forwardDestinationIp {
              title = "Forward IP"
              description = "Forward destination IP address of incoming flow (e.g., 10.20.30.24)"
              type = string
              format = ipv4-address
            }

            forwardDestinationPort {
              title = "Forward Port"
              description = "Forward destination port of incoming flow (e.g., 22)"
              type = integer
              format = port-number
            }

          }
        }
      }
    }

    requirements {

      appliance {
        type = Container
        resourceTypes = [
          tosca.resourceTypes.IpVpnService
        ]
      }

    }

  }
}

serviceTemplates {

  E2eVpnService {

    title = "End-to-end VPN service"
    description = """
    Implementation template for the end-to-end service, built on two resources:
    - A dedicated segment based on a dummy (place-hodlder) random string resource
    - A virtual segment based on the real IpVpnService resource instance
    """
    implements = cyan.resourceTypes.E2eVpnService

    resources {

      dedicated {
        title = "Dedicated Service Segment"
        type = tosca.resourceTypes.RandomString
        properties {
        }
      }

      virtual {
        title = "Virtual Service Segment"
        type = tosca.resourceTypes.IpVpnService
        properties {
          customer = {getParam = customer}
          customerVlanId = {getParam = customerVlanId}
          customerVnfIp = {getParam = customerVnfIp}
          customerNetmask = {getParam = customerNetmask}
          domainName = {getParam = domainName}
          globalOrgName = {getParam = globalOrgName}
          appliance = {getParam = appliance}
          unitNumber = {getParam = unitNumber}
          privateSideVPort = {getParam = privateSideVPort}
          publicSideVPort = {getParam = publicSideVPort}
          customerDefaultGw = {getParam = customerDefaultGw}
          bgpRouting = {getParam = bgpRouting}
          firewall = {getParam = firewall}
          staticNat = {getParam = staticNat}
          portForwardingNat = {getParam = portForwardingNat}
        }
      }
    }
  }
}
